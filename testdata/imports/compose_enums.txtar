-- cue.mod/module.cue --
module: "example.com"

-- one.cue --
package test

import "example.com/dep"

LocalEnum: "foo" | "bar" | "baz" @cuetsy(kind="enum")
LocalEnumD: *"foo" | "bar" | "baz" @cuetsy(kind="enum")
LocalEnumNumeric: 1 | 2 | 3 @cuetsy(kind="enum", memberNames="One|Two|Three")
LocalEnumNumericD: *1 | 2 | 3 @cuetsy(kind="enum", memberNames="One|Two|Three")

Compose: {
    localstr: LocalEnum & (*"baz" | _)
    localstrd: LocalEnumD
    localstrover: LocalEnumD & (*"baz" | _)
    localnum: LocalEnumNumeric & (*2 | _)
    localnumd: LocalEnumNumericD
    localnumover: LocalEnumNumericD & (*2 | _)
    impstr: dep.DepEnum & (*"bar" | _)
    impstrd: dep.DepEnumD
    impstrover: dep.DepEnumD | *"bar"
    impnum: dep.DepEnumNumeric & (*3 | _)
    impnumd: dep.DepEnumNumericD
    impnumover: dep.DepEnumNumericD | *3
    union: (dep.DepEnumNumericD & 2) | (dep.DepEnumNumericD & 3)
    unionStrings: (LocalEnum & "bar") | (LocalEnum & "foo") | (LocalEnum & "baz")
} @cuetsy(kind="interface")

-- dep/file.cue --
package dep

DepEnum: "foo" | "bar" | "baz" @cuetsy(kind="enum")
DepEnumD: *"foo" | "bar" | "baz" @cuetsy(kind="enum")
DepEnumNumeric: 1 | 2 | 3 @cuetsy(kind="enum", memberNames="One|Two|Three")
DepEnumNumericD: *1 | 2 | 3 @cuetsy(kind="enum", memberNames="One|Two|Three")

-- out/gen --

export enum LocalEnum {
  Bar = 'bar',
  Baz = 'baz',
  Foo = 'foo',
}

export enum LocalEnumD {
  Bar = 'bar',
  Baz = 'baz',
  Foo = 'foo',
}

export const defaultLocalEnumD: LocalEnumD = LocalEnumD.Foo;

export enum LocalEnumNumeric {
  One = 1,
  Three = 3,
  Two = 2,
}

export enum LocalEnumNumericD {
  One = 1,
  Three = 3,
  Two = 2,
}

export const defaultLocalEnumNumericD: LocalEnumNumericD = LocalEnumNumericD.One;

export interface Compose {
  impnum: dep.DepEnumNumeric;
  impnumd: dep.DepEnumNumericD;
  impnumover: (dep.DepEnumNumericD | 3);
  impstr: dep.DepEnum;
  impstrd: dep.DepEnumD;
  impstrover: (dep.DepEnumD | 'bar');
  localnum: LocalEnumNumeric;
  localnumd: LocalEnumNumericD;
  localnumover: LocalEnumNumericD;
  localstr: LocalEnum;
  localstrd: LocalEnumD;
  localstrover: LocalEnumD;
  union: dep.DepEnumNumericD;
  unionStrings: LocalEnum;
}

export const defaultCompose: Partial<Compose> = {
  impnum: dep.DepEnumNumeric.Three,
  impnumd: dep.DepEnumNumericD.One,
  impnumover: 3,
  impstr: dep.DepEnum.Bar,
  impstrd: dep.DepEnumD.Foo,
  impstrover: 'bar',
  localnum: LocalEnumNumeric.Two,
  localnumd: LocalEnumNumericD.One,
  localnumover: LocalEnumNumericD.Two,
  localstr: LocalEnum.Baz,
  localstrd: LocalEnumD.Foo,
  localstrover: LocalEnumD.Baz,
};
