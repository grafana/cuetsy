Verifies common struct (aka interface) properties:
* Concrete values
* Typing
* Referencing
* Inheritance

-- cue --
E1: "e1str1" | "e1str2" | "e1str3" @cuetsy(kind="enum")
E2: "e2str1" | "e2str2" | "e2str3" | "e2str4" @cuetsy(kind="enum")

I1: {
  I1_OptionalDisjunctionLiteral?: "other" | "values" | 2
  I1_FloatLiteral: 4.4
  I1_Top: _
} @cuetsy(kind="interface")

I2: {
  I2_Number: number
  I2_OptionalInterfaceReference?: I1
  I2_OptionalBool?: bool
  I2_TypedList: [...number]
} @cuetsy(kind="interface")

I3: {
  I3_EnumReference: E1
  I3_OptionalString?: string
  I3_OptionalNumber?: number
} @cuetsy(kind="interface")

I4: I2 & I3 & {
  I4_OptionalEnumReference?: E2
} @cuetsy(kind="interface")

I5: I2 & {
  I5_OptionalEnumReference?: E2
}  & I3 @cuetsy(kind="interface")

I6: I2 & I3 @cuetsy(kind="interface")

-- ts  --
export enum E1 {
  E1str1 = 'e1str1',
  E1str2 = 'e1str2',
  E1str3 = 'e1str3',
}
export enum E2 {
  E2str1 = 'e2str1',
  E2str2 = 'e2str2',
  E2str3 = 'e2str3',
  E2str4 = 'e2str4',
}
export interface I1 {
  I1_FloatLiteral: 4.4;
  I1_OptionalDisjunctionLiteral?: 'other' | 'values' | 2;
  I1_Top: any;
}
export interface I2 {
  I2_Number: number;
  I2_OptionalBool?: boolean;
  I2_OptionalInterfaceReference?: I1;
  I2_TypedList: number[];
}
export interface I3 {
  I3_EnumReference: E1;
  I3_OptionalNumber?: number;
  I3_OptionalString?: string;
}
export interface I4 extends I2, I3 {
  I4_OptionalEnumReference?: E2;
}
export interface I5 extends I2, I3 {
  I5_OptionalEnumReference?: E2;
}
export interface I6 extends I2, I3 {
}
